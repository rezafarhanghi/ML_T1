
import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import pandas as pd
%matplotlib inline
x1=np.random.rand(5)*20
y1=4.5*x1-2.5
y1=y1+np.random.normal(scale=3,size=y1.shape)
x1=x1.reshape(-1,1)
y1=y1.reshape(-1,1)
lr_modelx1_1=LinearRegression(normalize=True)
lr_modelx1_1.fit(x1,y1)
print(lr_modelx1_1.score(x1,y1))
print(lr_modelx1_1.coef_)
print(lr_modelx1_1.intercept_)
x1_line1=np.array([x1.min()-5,x1.max()+5])
y1_line1=lr_modelx1_1.coef_*x1_line1+lr_modelx1_1.intercept_
x1_line1=x1_line1.reshape(-1,1)
y1_line1=y1_line1.reshape(-1,1)
plt.plot(x1,y1,'bo',label='input_data')
plt.plot(x1_line1,y1_line1,'r--',label='predicted_line_x**1')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
lr_modelx1_4=LinearRegression(normalize=True)
x1_4=x1**4
lr_modelx1_4.fit(x1_4,y1)
print(lr_modelx1_4.score(x1_4,y1))
print(lr_modelx1_4.coef_)
print(lr_modelx1_4.intercept_)
x1_line4=np.array([0,2.2,0.01]).reshape(-1,1)**4
y1_line4=lr_modelx1_4.predict(x1_line4)
plt.plot(x1,y1,'bo',label='input_data')
plt.plot(x1_line4,y1_line4,'r--',label='predicted_line_x**4')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
lr_modelx1_16=LinearRegression(normalize=True)
x1_16=x1**16
lr_modelx1_16.fit(x1_16,y1)
print(lr_modelx1_16.score(x1_16,y1))
print(lr_modelx1_16.coef_)
print(lr_modelx1_16.intercept_)
x1_line16=np.array([0,1.21,0.01]).reshape(-1,1)**16
y1_line16=lr_modelx1_16.predict(x1_line16)
plt.plot(x1,y1,'bo',label='input_data')
plt.plot(x1_line16,y1_line16,'r--',label='predicted_line_x**16')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
x2=np.random.rand(25)*20
y2=4.5*x2-2.5
y2=y2+np.random.normal(scale=3,size=y2.shape)
x2=x2.reshape(-1,1)
y2=y2.reshape(-1,1)
lr_modelx2_1=LinearRegression(normalize=True)
lr_modelx2_1.fit(x2,y2)
print(lr_modelx2_1.score(x2,y2))
print(lr_modelx2_1.coef_)
print(lr_modelx2_1.intercept_)
x2_line1=np.array([x2.min()-5,x2.max()+5])
y2_line1=lr_modelx2_1.coef_*x2_line1+lr_modelx2_1.intercept_
x2_line1=x2_line1.reshape(-1,1)
y2_line1=y2_line1.reshape(-1,1)
plt.plot(x2,y2,'bo',label='input_data')
plt.plot(x2_line1,y2_line1,'r--',label='predicted_line_x**1')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
lr_modelx2_4=LinearRegression(normalize=True)
x2_4=x2**4
lr_modelx2_4.fit(x2_4,y2)
print(lr_modelx2_4.score(x2_4,y2))
print(lr_modelx2_4.coef_)
print(lr_modelx2_4.intercept_)
x2_line4=np.array([0,2.2,0.01]).reshape(-1,1)**4
y2_line4=lr_modelx2_4.predict(x2_line4)
plt.plot(x2,y2,'bo',label='input_data')
plt.plot(x2_line4,y2_line4,'r--',label='predicted_line_x**4')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
lr_modelx2_16=LinearRegression(normalize=True)
x2_16=x2**16
lr_modelx2_16.fit(x2_16,y2)
print(lr_modelx2_16.score(x2_16,y2))
print(lr_modelx2_16.coef_)
print(lr_modelx2_16.intercept_)
x2_line16=np.array([0,1.21,0.01]).reshape(-1,1)**16
y2_line16=lr_modelx2_16.predict(x2_line16)
plt.plot(x2,y2,'bo',label='input_data')
plt.plot(x2_line16,y2_line16,'r--',label='predicted_line_x**16')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
x3=np.random.rand(100)*20
y3=4.5*x3-2.5
y3=y3+np.random.normal(scale=3,size=y3.shape)
x3=x3.reshape(-1,1)
y3=y3.reshape(-1,1)
lr_modelx3_1=LinearRegression(normalize=True)
lr_modelx3_1.fit(x3,y3)
print(lr_modelx3_1.score(x3,y3))
print(lr_modelx3_1.coef_)
print(lr_modelx3_1.intercept_)
x3_line1=np.array([x3.min()-5,x3.max()+5])
y3_line1=lr_modelx3_1.coef_*x3_line1+lr_modelx3_1.intercept_
x3_line1=x3_line1.reshape(-1,1)
y3_line1=y3_line1.reshape(-1,1)
plt.plot(x3,y3,'bo',label='input_data')
plt.plot(x3_line1,y3_line1,'r--',label='predicted_line_x**1')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
lr_modelx3_4=LinearRegression(normalize=True)
x3_4=x3**4
lr_modelx3_4.fit(x3_4,y3)
print(lr_modelx3_4.score(x3_4,y3))
print(lr_modelx3_4.coef_)
print(lr_modelx3_4.intercept_)
x3_line4=np.array([0,2.2,0.01]).reshape(-1,1)**4
y3_line4=lr_modelx3_4.predict(x3_line4)
plt.plot(x3,y3,'bo',label='input_data')
plt.plot(x3_line4,y3_line4,'r--',label='predicted_line_x**4')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
lr_modelx3_16=LinearRegression(normalize=True)
x3_16=x3**16
lr_modelx3_16.fit(x3_16,y3)
print(lr_modelx3_16.score(x3_16,y3))
print(lr_modelx3_16.coef_)
print(lr_modelx3_16.intercept_)
x3_line16=np.array([0,1.21,0.01]).reshape(-1,1)**16
y3_line16=lr_modelx3_16.predict(x3_line16)
plt.plot(x3,y3,'bo',label='input_data')
plt.plot(x3_line16,y3_line16,'r--',label='predicted_line_x**16')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
x4=np.random.rand(1000)*20
y4=4.5*x4-2.5
y4=y4+np.random.normal(scale=3,size=y4.shape)
x4=x4.reshape(-1,1)
y4=y4.reshape(-1,1)
lr_modelx4_1=LinearRegression(normalize=True)
lr_modelx4_1.fit(x4,y4)
print(lr_modelx4_1.score(x4,y4))
print(lr_modelx4_1.coef_)
print(lr_modelx4_1.intercept_)
x4_line1=np.array([x4.min()-5,x4.max()+5])
y4_line1=lr_modelx4_1.coef_*x4_line1+lr_modelx4_1.intercept_
x4_line1=x4_line1.reshape(-1,1)
y4_line1=y4_line1.reshape(-1,1)
plt.plot(x4,y4,'bo',label='input_data')
plt.plot(x4_line1,y4_line1,'r--',label='predicted_line_x**1')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
lr_modelx4_4=LinearRegression(normalize=True)
x4_4=x4**4
lr_modelx4_4.fit(x4_4,y4)
print(lr_modelx4_4.score(x4_4,y4))
print(lr_modelx4_4.coef_)
print(lr_modelx4_4.intercept_)
x4_line4=np.array([0,2.2,0.01]).reshape(-1,1)**4
y4_line4=lr_modelx4_4.predict(x4_line4)
plt.plot(x4,y4,'bo',label='input_data')
plt.plot(x4_line4,y4_line4,'r--',label='predicted_line_x**4')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
lr_modelx4_16=LinearRegression(normalize=True)
x4_16=x4**16
lr_modelx4_16.fit(x4_16,y4)
print(lr_modelx4_16.score(x4_16,y4))
print(lr_modelx4_16.coef_)
print(lr_modelx4_16.intercept_)
x4_line16=np.array([0,1.21,0.01]).reshape(-1,1)**16
y4_line16=lr_modelx4_16.predict(x4_line16)
plt.plot(x4,y4,'bo',label='input_data')
plt.plot(x4_line16,y4_line16,'r--',label='predicted_line_x**16')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
numberdata=np.array([5,25,100,1000]).reshape(-1,1)
list1=[]
list1.append(lr_modelx1_1.score(x1,y1))
list1.append(lr_modelx2_1.score(x2,y2))
list1.append(lr_modelx3_1.score(x3,y3))
list1.append(lr_modelx4_1.score(x4,y4))
acc_1=np.array(list1)
list2=[]
list2.append(lr_modelx1_4.score(x1_4,y1))
list2.append(lr_modelx2_4.score(x2_4,y2))
list2.append(lr_modelx3_4.score(x3_4,y3))
list2.append(lr_modelx4_4.score(x4_4,y4))
acc_4=np.array(list2)
list3=[]
list3.append(lr_modelx1_16.score(x1_16,y1))
list3.append(lr_modelx2_16.score(x2_16,y2))
list3.append(lr_modelx3_16.score(x3_16,y3))
list3.append(lr_modelx4_16.score(x4_16,y4))
acc_16=np.array(list3)
plt.plot(numberdata,acc_1*100,'bo',label='x')
plt.plot(numberdata,acc_4*100,'go',label='x**4')
plt.plot(numberdata,acc_16*100,'ro',label='x**16')
plt.xlabel('number_sample_data')
plt.ylabel('acurancy_%')
plt.legend()
